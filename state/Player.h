// Generated by dia2code
#ifndef STATE__PLAYER__H
#define STATE__PLAYER__H

#include <vector>

namespace state {
  class Ressource;
  class Ship;
  class StellarSystem;
  class Building;
  class Planet;
  class TechID;
  class TechnologyTree;
}

#include "Ressource.h"
#include "Ship.h"
#include "StellarSystem.h"
#include "Building.h"
#include "Planet.h"
#include "TechID.h"
#include "TechnologyTree.h"

namespace state {

  /// class Player - 
  class Player {
    // Associations
    // Attributes
  protected:
    Ressource ressources;
    Ship ship;
    StellarSystem stellarSystem;
    /// Si c'est au tour du joueur
    bool isTurn;
    /// Donne l'emplacement selectionné sur la map
    std::vector<int> moveShip_map;
    std::vector<Ship> ship_list;
    // Operations
  public:
    Player ();
    ~Player ();
    /// Créer un nouveau vaisseau
    /// @param ship		(???) 
    bool newShip (Ship ship);
    bool moveShip (int index, int i, int j);
    bool newBuild (Building building);
    bool colonize (Planet planet);
    bool shipAttack (Ship ship);
    bool buyShip (Ship ship);
    bool buyBuilding (Building building);
    bool sellShip (Ship ship);
    bool sellBuilding (Building building);
    bool upgradeBuilding (Building building);
    bool research (TechID technology);
    // Setters and Getters
    const Ressource& getRessources() const;
    void setRessources(const Ressource& ressources);
    const Ship& getShip() const;
    void setShip(const Ship& ship);
    const StellarSystem& getStellarSystem() const;
    void setStellarSystem(const StellarSystem& stellarSystem);
    bool getIsTurn() const;
    void setIsTurn(bool isTurn);
    const std::vector<int>& getMoveShip_map() const;
    void setMoveShip_map(const std::vector<int>& moveShip_map);
    const std::vector<Ship>& getShip_list() const;
    void setShip_list(const std::vector<Ship>& ship_list);
  };

};

#endif
